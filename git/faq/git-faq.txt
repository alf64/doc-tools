Useful git commands / hints

# Checks repo status
git status

# Check the difference between local and remote tracking
git diff
# inspect submodules changes also
git diff --submodule=diff
# Checking the difference of particular files or directories with files
git diff <file1> <file2>
# Saving diff to file
git diff > <filename-with-diff>
# Applying diff from file (put file in repo)
git apply <filename-with-diff>

# Creates new branch from current branch and checks out to it
git checkout -b <new-branch-name>

# Fetches changes from origin
# (let's git know about changes on remote - updates metada, does not make any local changes to the sources)
git fetch

# Merges changes from other branch into current branch
git merge <branch-name>
Examples:
# Merge changes made in remote branch1 (assuming git fetch has been called first so such branch exists on remote) to the actual branch
git merge origin/branch1
# Merge changes made on local branch2 to the actual branch
git merge branch2

# Rebase to branch
git rebase <branch-name>
# Example rebase to master branch: git rebase origin/master

# Pulls changes (git fetch + git merge)
git pull

# Push changes to remote
git push origin HEAD:<name-of-the-remote-branch-to-push-to>
# Push changes and set to track the remote
git push --set-upstream origin HEAD:<name-of-the-remote-branch-to-push-to>

# Adds all locally changed files as candidates for commit
git add -A
# Add only specific file:
git add <path-to-locally-changed-file>

# Commits changes (txt editor shall bring up allowing for putting in commit message)
git commit
# commit changes with message given in cmd
git commit -m "<commit-message>"
# commit with author different than in your .gitconfig
git commit --author="<author-name, i.e. Josh Jobs josh@jobs.com>"
# amend more changes to the previous commit (assuming it's still local commit not pushed to remote)
# can also be used to just change commit message
git commit --amend

# Reset changes
# Brings added changes (marked with git add) to the previous state (just changed content / local changes)
git reset
# resets local commits and brings them back as local changes
git reset --hard
# or this one resets changes to one commit before. You can change '1' to any other number and reset more commits
git reset HEAD~1
# reset changes and get rid of local changes (not commited) also
git reset --hard HEAD~1

################################################################################################

# Add submodule to your repository.
git submodule [-b <branch-for-submodule-initial-commit>] [--name <submodule-name>] add <http-or-ssh-address-of-repo-to-add-as-submodule> [<path-for-submodule>]
# Example of adding DbConnector repo as submodule: git submodule add https://github.com/chaconinc/DbConnector
# Example of adding DbConnector repo as submodule under dbc dir: git submodule add https://github.com/chaconinc/DbConnector dbc
# Example of adding lorawan_test_tools submodule under src/lorawan_test_tools directory:
git submodule add -b develop --name lorawan_test_tools git@gitlab.example.com:example/lorawan/lorawan-test-tools.git src/lorawan_test_tools

# Updates and inits submodules within repository, and submodules within these submodules (--recursive)
# This also brings submodules to their original commits (resets local commits and brings them back as local changes)
git submodule update --init --recursive

# To add submodule using TortoiseGit:
# 1. right-click on a main repo dir (free place inside it) and select TortoiseGit -> Submodule Add... You must do this in the highest level directory of a repo. (@see submodule-add-tortoisegit.png)
# 2. Provide the path to the repo that shall be used as submodule
# 3. Provide a name of the folder where the submodule shall be placed (it may be different than submodule repo name) - important: do not create the dir for submodule first. It will be created automatically.
# 4. Select 'Force' option and click OK

# When while trying to create a submodule you get the following erro: transport 'file' not allowed
# To solve it, run:
git config --global protocol.file.allow always
# This should add the following entry in you .gitconfig file:
[protocol "file"]
	allow = always

################################################################################################

# Delete branch (locally only)
git branch -D <branch-name>
# Delete branch (on remote)
git push origin --delete <name-of-the-branch-to-delete>

# How to re-name branch (locally, and replacing old with new on remote)
git branch -m <new-name>
# Then you can simply push it to remote...
git push origin -u <branch-name>
# ... and delete the old remote branch
git push origin --delete <name-of-the-branch-to-delete>
# If you had a merge request for old name branch, when you delete it on remote, merge request will be deleted too

# Get rid of remote branches data in repository upon deleting them by the remote (i.e. via GitLab) and deleting them locally (git branch -D)
# (Yes it's possible that such remote branch is still visible in repo)
git fetch --prune --all

# List all branches (even remotes)
git branch -a
# List local branches
git branch
# List remote branches
git branch -r

# Set your local branch to track remote branch (upon pushing it is cool to see with git status if there is a difference between local and remote, of course if git fetch has been called)
git branch --set-upstream-to=origin/<remote-branch-name, i.e. master>

# Interactive rebase (allows for picking (p) the base commit and squash (s) commits after it)
git rebase -i HEAD~<number of commits before the actual head to get back to and pick as base commit>
# interactive message will pop up, mark commit to pick with p, mark commits to squash as s, edit commit message (one msg for all squashed commits)

# Stashing changes
# You can store your local uncommitted changes using mechanism called stash. Changes are stored locally in your git repository.
# The following stashes the changes:
git stash
# You can stash almost as many changes as you want, each one is stored into separate stash.
# To show all stashes you have:
git stash list
# stash{0} is always the recently pushed stash, the newest one.
# To see which files stash affects:
git stash show stash{<stash-index, i.e. 0>}
# To see the diff of the most newest stash:
git stash show -p
# To see any stash diff call:
git stash show -p stash{<stash-index>}
# To apply the stash onto your repo
git stash apply stash{<stash-index>}
# To delete the most newest stash
git stash drop
# To delete any stash
git stash drop stash{<stash-index>}
# To delete all stashes
git stash clear
# To stash changes and assign a name to a stash for easier reference
git stash push -m "<name-of-the-stash>"
# To stash only specific file
git stash push <path to file> <path to next file> <path to next file> -m "<name-of-the-stash>"
# To stash also untracked repository files (by default they are not being stashed)
git stash -u
# To apply the stash and delete it
git stash pop stash{<stash-index>}

################################################################################################
# Deleting a tag (locally)
git tag -d <tag-name>
# or
git tag --delete <tag-name>
# Deleting a tag (remote)
git push origin --delete <tag-name>
# Updating tags from remote
git fetch
# or
git fetch --tags --all --force
# List local tags
git tag
# or
git tag -l
# How to list remote tags:
git ls-remote --tags
# List tags along with commit SHA:
git show-ref --tags
# Search/list tags that match pattern
git tag -l "<pattern>"
# Creating lightweight tags on current commit
git tag <tag-name>
# Creating lightweight tags on selected commit
git tag <tag-name> <commit-SHA>
# Checking out tagged commit
git checkout <tag-name>
# Pushing the tag to remote:
git push origin <tag-name>
# How to push all local tags to remote
git push --tags
################################################################################################


# Cleaning
# Clean the repository from any added files
git clean -xdf

# Inspecting log
git log
# Inspecting sophisticated log with branch diagram (adog = --All --Decorate --Oneline --Graph)
git log --all --decorate --oneline --graph



########################### working-with-gerrit #######################################
Gerrit handles git repositories. It allows for making reviews and managing the repository. It's an alternative to github and gitlab.


### The workflow in gerrit is as follows: ###
- you make a local branch for your feature development out of the most current master branch
- any changes you do must end up in ONLY ONE COMMIT (use 'git commit --amend')
- you make a push by using following command:
* 'git push origin HEAD:refs/for/master'
- upon push a new review will be generated for your changes on gerrit
- when master branch gets updates, you have to do a rebase using commands:
 * 'git checkout master'
 * 'git pull'
 * 'git checkout <your-local-feature-branch>'
 * 'git rebase master'
or
 * git fetch
 * git rebase origin/master
- after rebase once again push: 'git push origin HEAD:refs/for/master' and your review will get updated
- when you have to update your commit, use 'git commit --amend' and then push ('git push origin HEAD:refs/for/master')
By using amends you will not see diffs between your own changes locally, however gerrit will differentiate them and you will be able to see them on gerrit.
The differences between your one commit are called 'patchsets' in gerrit.
- you have to click 'Start Review' to trigger the jenkins build so the jenkins will give you +1 if everything is fine
In the 'Start Review' window:
- select reviewers by adding the appropriate emails of people that shall do review (or an email group consisting of few people)
- give yourself +1, which means you certify your code as complete & ready


### When someone asks you to rebase to his commit/review, do the following: ###
- go onto someone's ongoing gerrit review page through your web browser and find out the command for fetching his changes
(on the top right click '...' -> 'Download patch' and from available commands take fetch command)
- fetch someone's work
i.e.: 'git fetch ssh://alf@gerrit.info:29418/Project1 refs/changes/03/36503/5'
(last digit is a number of patchset of the commit. In this case it's 5, which means someone pushed 5th times on his review)
git should display something like the following if succeeded:
'From ssh://gerrit.info:29418/Project1
 * branch                refs/changes/03/36503/5 -> FETCH_HEAD'
It means that git now stores such branch under the temporary 'FETCH_HEAD' name. You can from now on reference to this branch by FETCH_HEAD name.
- assuming you are on a branch/commit that needs to be rebased. Now perform rebase by following command:
'git rebase FETCH_HEAD'
If there are no conflicts, the rebase will be performed. Push your changes by doing 'git push origin HEAD:refs/for/master'.
If there are conflicts:
* resolve them
* use 'git add' to mark resolved files as resolved
* use 'git rebase --continue' to finish rebase
* push your changes by doing 'git push origin HEAD:refs/for/master'.
IMPORTANT:
- Gerrit will not allow you to push if your rebase is not up-to-date. Typical causes for this are:
* the commit you rebased to got updated in the meantime and your are not rebased to the newest one
* the commit you rebased to also relies on other commits still under development and those other commits got updated


### Commit chains in gerrit ###
Commit chain is the following situation: there are multiple reviews opened on gerrit and each one depends on a previous one.
Example:
You have a Review#1 with your commit#1 on top of a 'master' branch.
Then you create Review#2 with commit#2 on top of commit#1.
This results in a so-called commit-chain, consisting of 2 commits, each one in separate review. But gerrit will display these reviews as associated ones.


### Failed to push - '(commit already exists (in the change))' error message ###
When you update your commit and try to push and see the mentioned error it probably means that you work on relation chain and your commit depends on other commits.
Now it's very important that everytime you try to update your commit, the commits in relation chain must the most up-to-date ones.
You can see if your relation chain is up to date on gerrit. See your relation chain and if some commit in chain is not up-to-date then you will see '(Not Current)' being displayed in red near it.
To fix it you to have rebase the first commit without a note 'Not Current' onto its parent (that got updated).
Let's see an example of relation chain as displayed in gerrit (on top is your newest commit, below may be someone elses commits):
"Commit 1 blabla"
"Commit 2 blabla"
"Commit 3 blabla" (Not current)
"Commit 4 blabla" (Not current)
"Commit 5 blabla" (Not current)

As you see some commits are marked as Not Current.
In this situation when you add another changes to your Commit 1 and try to push it you will get an error '(commit already exists (in the change))'.
This is because gerrit knowns that some commits under Commit 1 have changed and you are trying to push older ones from your computer since you still sit on them.

To easily fix this particular situation you have to rebase Commit 2 onto its parent (Commit 3) (because currently Commit 2 relies on old parent. You have to do rebase onto newest Commit 3)
The rebase can be easily done in gerrit by clicking onto the page for Commit 2 and selecting 'Rebase' -> 'Rebase onto parent'. Or you can rebase manually on your machine.

After rebasing Commit 2 the situation will be as follows:
"Commit 1 blabla"
"Commit 2 blabla" (Not current)
"Commit 3 blabla" (Not current)
"Commit 4 blabla" (Not current)
"Commit 5 blabla" (Not current)

Now you have to rebase Commit 1 onto its parent, since Commit 2 got updated.
If everyghing went smoothly you will get the following situation:
"Commit 1 blabla"
"Commit 2 blabla"
"Commit 3 blabla"
"Commit 4 blabla"
"Commit 5 blabla"

Now you can push changes to Commit 1 without errors.


### Rebasing your commit chain ###
Normally you rebase your commit chain as follows:
* go to the very first review/commit in a chain
* rebase it to 'master' branch (assuming it is derived from this branch) and push your changes to remote
* go to the 2nd review/commit
* rebase it to its parent commit (fetch parent commit to FETCH_HEAD and being on commit#2 perform rebase to FETCH_HEAD)


### Rebasing your commit chain when one of the commit has changed its commit-msg ###
Sometimes a reviewer will point out troubles with your commit message and you would need to change it.
Now this creates a problem - when you change a commit message of commit#1 in a chain, then rebasing commit#2 to its parent will cause the existence of 2 commits#1 under commit#2.
One commit#1 will be with old commit-msg, 2nd commit#1 will be with new commit-msg. Such situation is not allowable.
You should do the following:
* rebase the very first commit to the 'master' branch (assuming it is derived from this branch) and push it to the remote
* on gerrit go to your review for second commit in a chain and find out the 'Rebase' button. Hit it and select to 'rebase to a parent change'. Gerrit will automatically perform a rebase correctly.
Why the rebase performed by gerrit is fine, while doing it for yourself is not? (double commit#1 with different commit-msg)
Gerrit probably does perform this rebase by not using 'git rebase' command, but by intelligently using 'git cherry pick' command (cherry picking commit#2 onto commit#1 with new commit-msg).
You could try to do that by yourself.


### What to do when the base commit of the commit chain has been merged into the master while the other commits from the chain were not? ###
Well now the rest of your chain should be rebased to the master branch.
- git pull the newest master branch
- git cherry-pick the next commit from the chain
- push your changes.
Gerrit should become aware that you made a rebase now onto the master. He will update your review page.


### How does gerrit associate commit with review page? ###
As long as the 'Change-Id' field (that is added by gerrit to your commit-msg when you push your changes for the 1st time when creating review) remains the same, gerrit should
associate whatever you do with your commit with the opened review.


### Creating & adding SSH keys for gerrit ###
SSH keys should be generated on your PC and put into gerrit (go to your profile settings, find SSH keys setting, add SSH key)
Use this command in git bash: ssh-keygen -t ecdsa -b 521
Then add your public key located at C:\Users\<username>\.ssh\id_ecdsa.pub to Gerrit user settings. (copy it as a text)


### Intersting things about gerrit ###
- when your review is up-to-date, the blue icon 'Active' will be displayed at the left upper corner (next to the title of your review)
- when your review is not up-to-date (i.e. master branch got updated), the red icon 'Merge Conflist' will be displayed at the left upper corner (next to the title of your review)
- the '+1' grades from people will be erased with each new patchset (commit amend update). You have to give yourself '+1' once again by using 'Reply' button.
Grades from other people should be restored by themselves (you have to ask them for it).


#################################### end of working-with-gerrit #############################################################


